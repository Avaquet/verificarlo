#!/usr/bin/env python3
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
from tabulate import tabulate
import random
import math
import sys
import struct
import shlex
import os.path
import subprocess
from os import listdir

def GetFunctionInfo(FunctionID):
	CallNb = int(FunctionID[FunctionID.rfind('_')+1:])
	FunctionID = FunctionID[:FunctionID.rfind('_')]
	Fline = int(FunctionID[FunctionID.rfind('_')+1:])
	FunctionID = FunctionID[:FunctionID.rfind('_')]
	Fname = FunctionID[FunctionID.rfind('/')+1:].upper()
	FunctionID = FunctionID[:FunctionID.rfind('/')]
	Ffile = FunctionID[FunctionID.rfind('/')+1:]
	return CallNb, Fline, Fname, Ffile

def Histogram_A(ID, Data, Title, Color, File, yscale):
	File.write("																					\n\
       var data = google.visualization.arrayToDataTable([											\n\
          "+ Data +"																				\n\
        ]);																							\n\
																									\n\
        var options = {																				\n\
        	title: \" " + Title + "\",																\n\
			hAxis: {																				\n\
				textStyle : { fontSize: 1 },														\n\
				titleTextStyle: {fontSize: 1 },														\n\
				textPosition: 'none',																\n\
			},																						\n\
			bar: { groupWidth: \"90%\" },															\n\
			legend: { position: \"none\" },															\n\
			annotations: {																			\n\
				textStyle: {																		\n\
					color: 'black',																	\n\
					fontSize: 9,																	\n\
					auraColor: 'transparent',														\n\
				},																					\n\
				stem: { length: 0 }, 																\n\
				alwaysOutside: true,																\n\
			},																						\n\
			vAxis: {																				\n\
				viewWindow: { min: 0, max: " + yscale + " },										\n\
			},																						\n\
          	colors: " + Color +	"																	\n\
        };																							\n\
        																							\n\
		var view = new google.visualization.DataView(data);											\n\
		view.setColumns([0, 1,																		\n\
		{ calc: \"stringify\",																		\n\
		sourceColumn: 1,																			\n\
		type: \"string\",																			\n\
		role: \"annotation\"}]);																	\n\
																									\n\
        var chart = new google.visualization.ColumnChart(document.getElementById(\'" + ID + "\'));	\n\
        																							\n\
        chart.draw(view, options);																	\n\
    ")

def Histogram_B(ID, Data, Title, Color, File, yscale):
	File.write("																					\n\
       var data = google.visualization.arrayToDataTable([											\n\
          "+ Data +"																				\n\
        ]);																							\n\
																									\n\
        var options = {																				\n\
        	title: \" " + Title + "\",																\n\
			hAxis: {																				\n\
				textStyle : { fontSize: 1 },														\n\
				titleTextStyle: {fontSize: 1 },														\n\
				textPosition: 'none',																\n\
			},																						\n\
			bar: { groupWidth: \"90%\" },															\n\
			legend: { position: \"none\" },															\n\
			annotations: {																			\n\
				textStyle: {																		\n\
					color: 'black',																	\n\
					auraColor: 'transparent',														\n\
					fontSize: 9,																	\n\
				},																					\n\
				stem: { length: 0 },																\n\
				alwaysOutside: true,																\n\
			},																						\n\
			vAxis: {																				\n\
				viewWindow: { min: 0, max: " + yscale + " },										\n\
			},																						\n\
          	colors: " + Color +	"																	\n\
        };																							\n\
        																							\n\
		var view = new google.visualization.DataView(data);											\n\
		view.setColumns([0, 1, 																		\n\
		{ calc: \"stringify\",																		\n\
		sourceColumn: 1,																			\n\
		type: \"string\",																			\n\
		role: \"annotation\"}, 2,																	\n\
		{ calc: \"stringify\",																		\n\
		sourceColumn: 2,																			\n\
		type: \"string\",																			\n\
		role: \"annotation\"},																		\n\
		]);																							\n\
																									\n\
        var chart = new google.visualization.ColumnChart(document.getElementById(\'" + ID + "\'));	\n\
        																							\n\
        chart.draw(view, options);																	\n\
    ")

def Bar(ID, Data, Title, Color, File):
	File.write("																					\n\
       var data = google.visualization.arrayToDataTable([											\n\
          "+ Data +"																				\n\
        ]);																							\n\
																									\n\
        var options = {																				\n\
        	title: \" " + Title + "\",																\n\
			hAxis: {																				\n\
				viewWindow: { min: 0, max: 52 },													\n\
			},																						\n\
			vAxis: {																				\n\
				title: '', titleTextStyle: {color: 'white'}, 										\n\
			},																						\n\
			chartArea: {  width: \"70%\"},															\n\
          	colors: " + Color +	",																	\n\
			bars: 'horizontal',																		\n\
        };																							\n\
        																							\n\
        var chart = new google.visualization.BarChart(document.getElementById(\'" + ID + "\'));		\n\
        																							\n\
        chart.draw(data, options);																	\n\
        document.getElementById(\'" + ID + "\').style.display = \"none\";							\n\
    ")

def Line(ID, Data, Title, File, Color):
	File.write("																					\n\
       var data = google.visualization.arrayToDataTable([											\n\
          "+ Data +"																				\n\
        ]);																							\n\
																									\n\
        var options = {																				\n\
        	title: \" " + Title + "\",																\n\
          	colors: " + Color +	",																	\n\
        };																							\n\
        																							\n\
        var chart = new google.visualization.LineChart(document.getElementById(\'" + ID + "\'));	\n\
        																							\n\
        chart.draw(data, options);																	\n\
    ")


if __name__ == "__main__":

	DaraDir = "vfc_exp_data/"
	Arguments = DaraDir + "ArgumentsResults.csv"
	Operations = DaraDir + "OperationsResults.csv"
	All_Args = DaraDir + "BothArgsResults.csv"
	All_Ops = DaraDir + "BothOpsResults.csv"
	SA_Args_svg = DaraDir + "vfc_args_only.svg"
	SA_Ops_svg = DaraDir + "vfc_ops_only.svg"
	SA_All_svg = DaraDir + "vfc_args_ops.svg"
	Report_File = "vfc_precexp_report.html"
	
	if not os.path.exists(Arguments):
		print("{} not found".format(Arguments))
		exit(0)
	else:
		DataArgs = pd.read_csv(Arguments)

	if not os.path.exists(Operations):
		print("{} not found".format(Operations))
		exit(0)
	else:
		DataOps = pd.read_csv(Operations)

	if not os.path.exists(All_Args):
		print("{} not found".format(All_Args))
		exit(0)
	else:
		DataAllArgs = pd.read_csv(All_Args)

	if not os.path.exists(All_Ops):
		print("{} not found".format(All_Ops))
		exit(0)
	else:
		DataAllOps = pd.read_csv(All_Ops)

	if not os.path.exists(SA_Args_svg):
		print("{} not found".format(SA_Args_svg))
		exit(0)

	if not os.path.exists(SA_Ops_svg):
		print("{} not found".format(SA_Ops_svg))
		exit(0)

	if not os.path.exists(SA_All_svg):
		print("{} not found".format(SA_All_svg))
		exit(0)

	Report = open(Report_File, "w")
	Report.write("<!DOCTYPE html>\n")
	Report.write("<html>\n")

	# Both Arguments #
	DataAllArgs = DataAllArgs[(DataAllArgs['Lib'] == 1) | (DataAllArgs['Int'] == 1)].reset_index(drop=True)
	DataAllArgs = DataAllArgs.sort_values(by=['Ncalls', 'ID'],  ascending=False).reset_index(drop=True)

	AllArgsNcalls = "['ID', 'Ncalls'],\n"
	AllArgsRange = "['ID', 'Range'],\n"
	AllArgsPrec = "['ID', 'Prec'],\n"

	i = 0
	while i < len(DataAllArgs.index):
		ID = str(DataAllArgs.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)
		tmp = DataAllArgs[DataAllArgs['ID'] == DataAllArgs.at[i, 'ID']]

		AllArgsNcalls += "['{ID}', {Ncalls}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Ncalls = tmp.at[i, 'Ncalls'])
		AllArgsRange += "['{ID}', {Range}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Range = tmp['Range'].max())
		AllArgsPrec += "['{ID}', {Prec}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Prec = tmp['Prec'].max())

		i += len(tmp.index) + 1

	AllArgsNcalls = AllArgsNcalls[:-2]
	AllArgsRange = AllArgsRange[:-2]
	AllArgsPrec = AllArgsPrec[:-2]

	# Both Operations #
	DataAllOps = DataAllOps[(DataAllOps['Lib'] != 1) & (DataAllOps['Int'] != 1)].reset_index(drop=True)
	DataAllOps = DataAllOps.sort_values(by=['Ncalls', 'ID'],  ascending=False).reset_index(drop=True)

	AllOpsNcalls = "['ID', 'Ncalls'],\n"
	AllOpsRange = "['ID', 'Range64', 'Range32'],\n"
	AllOpsPrec = "['ID', 'Prec64', 'Prec32'],\n"

	i = 0
	while i < len(DataAllOps.index):
		ID = str(DataAllOps.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)

		AllOpsNcalls += "['{ID}', {Ncalls}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Ncalls = DataAllOps.at[i, 'Ncalls'])
		AllOpsRange += "['{ID}', {Range64}, {Range32}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Range64 = DataAllOps.at[i, 'Range64'],
			Range32 = DataAllOps.at[i, 'Range32'])
		AllOpsPrec += "['{ID}', {Prec64}, {Prec32}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Prec64 = DataAllOps.at[i, 'Prec64'],
			Prec32 = DataAllOps.at[i, 'Prec32'])

		i += 1

	AllOpsNcalls = AllOpsNcalls[:-2]
	AllOpsRange = AllOpsRange[:-2]
	AllOpsPrec = AllOpsPrec[:-2]

	# Arguments #
	DataArgs = DataArgs[(DataArgs['Lib'] == 1) | (DataArgs['Int'] == 1)].reset_index(drop=True)
	DataArgs = DataArgs.sort_values(by=['Ncalls', 'ID'],  ascending=False).reset_index(drop=True)

	ArgsNcalls = "['ID', 'Ncalls'],\n"
	ArgsRange = "['ID', 'Range'],\n"
	ArgsPrec = "['ID', 'Prec'],\n"

	i = 0
	while i < len(DataArgs.index):
		ID = str(DataArgs.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)
		tmp = DataArgs[DataArgs['ID'] == DataArgs.at[i, 'ID']]

		ArgsNcalls += "['{ID}', {Ncalls}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Ncalls = tmp.at[i, 'Ncalls'])
		ArgsRange += "['{ID}', {Range}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Range = tmp['Range'].max())
		ArgsPrec += "['{ID}', {Prec}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Prec = tmp['Prec'].max())

		i += len(tmp.index) + 1

	ArgsNcalls = ArgsNcalls[:-2]
	ArgsRange = ArgsRange[:-2]
	ArgsPrec = ArgsPrec[:-2]

	# Operations #
	DataOps = DataOps[(DataOps['Lib'] != 1) & (DataOps['Int'] != 1)].reset_index(drop=True)
	DataOps = DataOps.sort_values(by=['Ncalls', 'ID'],  ascending=False).reset_index(drop=True)

	OpsNcalls = "['ID', 'Ncalls'],\n"
	OpsRange = "['ID', 'Range64', 'Range32'],\n"
	OpsPrec = "['ID', 'Prec64', 'Prec32'],\n"

	i = 0
	while i < len(DataOps.index):
		ID = str(DataOps.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)

		OpsNcalls += "['{ID}', {Ncalls}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Ncalls = DataOps.at[i, 'Ncalls'])
		OpsRange += "['{ID}', {Range64}, {Range32}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Range64 = DataOps.at[i, 'Range64'],
			Range32 = DataOps.at[i, 'Range32'])
		OpsPrec += "['{ID}', {Prec64}, {Prec32}],\n".format(
			ID = Ffile + '/' + Fname + '_' + str(Fline),
			Prec64 = DataOps.at[i, 'Prec64'],
			Prec32 = DataOps.at[i, 'Prec32'])

		i += 1

	OpsNcalls = OpsNcalls[:-2]
	OpsRange = OpsRange[:-2]
	OpsPrec = OpsPrec[:-2]

	#########################################
	#  				  HEAD 				 	#
	#########################################
	Report.write("<head>\n")
	Report.write("																				\n\
	<meta charset=\"UTF-8\">																	\n\
	<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>	\n\
    <script type=\"text/javascript\">															\n\
      google.charts.load('current', {'packages':['bar', 'corechart']});							\n\
      google.charts.setOnLoadCallback(drawChart);												\n\
																								\n\
      function drawChart() {																	\n\
    ")

	# Both Args #
	Histogram_A('AllArgsNcalls', AllArgsNcalls, "Number of calls", "['#BCC213']", Report, str(DataAllArgs['Ncalls'].max() + 5))
	Histogram_A('AllArgsRange', AllArgsRange, "Length of the exponent (bit)", "['#1374C2']", Report, str(11 + 5))
	Histogram_A('AllArgsPrec', AllArgsPrec, "Length of the mantissa (bit)", "['#C20700']", Report, str(52 + 5))

	i = 0
	while i < len(DataAllArgs.index):
		ID = str(DataAllArgs.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)
		tmp = DataAllArgs[DataAllArgs['ID'] == DataAllArgs.at[i, 'ID']].reset_index(drop=True)

		for j in tmp.index:
			if tmp.at[j, 'Type'] == 0:
				IO = tmp.at[j, 'IO'] + ' Float '
			else:
				IO = tmp.at[j, 'IO'] + ' Double '

			AllArgsList = "['IO', 'Range', 'Prec'],\n"
			AllArgsList += "['{IO}', {Range}, {Prec}],\n".format(
				IO = IO,
				Range = tmp.at[j, 'Range'],
				Prec = tmp.at[j, 'Prec'])

			Bar("AllArgsList_" + ID + "_" + str(j), 
				AllArgsList, 
				" ",
				"['#1374C2', '#C20700']",
				Report)

		i += j + 1

	# Both Ops #
	Histogram_A('AllOpsNcalls', AllOpsNcalls, "Number of calls", "['#BCC213']", Report,str(DataAllOps['Ncalls'].max() + 5))
	Histogram_B('AllOpsRange', AllOpsRange, "Length of the exponent (bit)", "['#0F5C9B', '#428FCE']", Report, str(11 + 5))
	Histogram_B('AllOpsPrec', AllOpsPrec, "Length of the mantissa (bit)", "['#9B0500', '#CE3833']", Report, str(52 + 5))

	i = 0
	while i < len(DataAllOps.index):
		ID = str(DataAllOps.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)

		AllOpsList = "['Precision', 'Range', 'Prec'],\n"

		AllOpsList += "['{Precision}', {Range64}, {Prec64}],\n".format(
				Precision = "Double",
				Range64 = DataAllOps.at[j, 'Range64'],
				Prec64 = DataAllOps.at[j, 'Prec64'])
		
		Bar("AllOpsList_" + ID + "_Double", 
			AllOpsList, 
			" ",
			"['#0F5C9B', '#9B0500']",
			Report)

		AllOpsList = "['Precision', 'Range', 'Prec'],\n"

		AllOpsList += "['{Precision}', {Range32}, {Prec32}],\n".format(
				Precision = "Float",
				Range32 = DataAllOps.at[j, 'Range32'],
				Prec32 = DataAllOps.at[j, 'Prec32'])

		Bar("AllOpsList_" + ID + "_Simple", 
			AllOpsList, 
			" ",
			"['#428FCE', '#CE3833']",
			Report)

		i += 1

	# Args #

	Histogram_A('ArgsNcalls', ArgsNcalls, "Number of calls", "['#BCC213']", Report, str(DataArgs['Ncalls'].max() + 5))
	Histogram_A('ArgsRange', ArgsRange, "Length of the exponent (bit)", "['#1374C2']", Report, str(11 + 5))
	Histogram_A('ArgsPrec', ArgsPrec, "Length of the mantissa (bit)", "['#C20700']", Report, str(52 + 5))

	i = 0
	while i < len(DataArgs.index):
		ID = str(DataArgs.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)
		tmp = DataArgs[DataArgs['ID'] == DataArgs.at[i, 'ID']].reset_index(drop=True)

		for j in tmp.index:
			if tmp.at[j, 'Type'] == 0:
				IO = tmp.at[j, 'IO'] + ' Float '
			else:
				IO = tmp.at[j, 'IO'] + ' Double '

			ArgsList = "['IO', 'Range', 'Prec'],\n"
			ArgsList += "['{IO}', {Range}, {Prec}],\n".format(
				IO = IO,
				Range = tmp.at[j, 'Range'],
				Prec = tmp.at[j, 'Prec'])

			Bar("ArgsList_" + ID + "_" + str(j), 
				ArgsList, 
				" ",
				"['#1374C2', '#C20700']",
				Report)

		i += j + 1

	# Ops #
	Histogram_A('OpsNcalls', OpsNcalls, "Number of calls", "['#BCC213']", Report,str( DataOps['Ncalls'].max() + 5))
	Histogram_B('OpsRange', OpsRange, "Length of the exponent (bit)", "['#0F5C9B', '#428FCE']", Report, str(11 + 5))
	Histogram_B('OpsPrec', OpsPrec, "Length of the mantissa (bit)", "['#9B0500', '#CE3833']", Report, str(52 + 5))

	i = 0
	while i < len(DataOps.index):
		ID = str(DataOps.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)

		OpsList = "['Precision', 'Range', 'Prec'],\n"

		OpsList += "['{Precision}', {Range64}, {Prec64}],\n".format(
				Precision = "Double",
				Range64 = DataOps.at[j, 'Range64'],
				Prec64 = DataOps.at[j, 'Prec64'])

		Bar("OpsList_" + ID + "_Double", 
			OpsList, 
			" ",
			"['#0F5C9B', '#9B0500']",
			Report)

		OpsList = "['Precision', 'Range', 'Prec'],\n"

		OpsList += "['{Precision}', {Range32}, {Prec32}],\n".format(
				Precision = "Float",
				Range32 = DataOps.at[j, 'Range32'],
				Prec32 = DataOps.at[j, 'Prec32'])

		Bar("OpsList_" + ID + "_Simple", 
			OpsList, 
			" ",
			"['#428FCE', '#CE3833']",
			Report)

		i += 1

	# Simulated Annealing #

	# Args #
	"""
	DataProbability = "['Iteration', 'Probability'],\n"
	DataEnergy = "['Iteration', 'Energy'],\n"
	DataTemperature = "['Iteration', 'Temperature'],\n"

	for i in range(len(SA_Args)):
		DataProbability += "['{Iteration}', '{Probability}'],\n".format(Iteration = i, Probability = SA_Args.at[i, "Probability"])
		DataEnergy += "['{Iteration}', '{Energy}'],\n".format(Iteration = i, Probability = SA_Args.at[i, "Energy"])
		DataTemperature += "['{Iteration}', '{Temperature}'],\n".format(Iteration = i, Probability = SA_Args.at[i, "Temperature"])

	DataProbability = DataProbability[:-2]
	DataEnergy = DataEnergy[:-2]
	DataTemperature = DataTemperature[:-2]

	Line("SA_Args_Probability", DataProbability, 'Evolution of the acceptation probability', Report, "['#BCC213']")
	Line("SA_Args_Energy", DataEnergy, 'Evolution of the system energy', Report, "['#BCC213']")
	Line("SA_Args_Temperature", DataTemperature, 'Evolution of the temperature', Report, "['#BCC213']")

	# Ops #
	DataProbability = "['Iteration', 'Probability'],\n"
	DataEnergy = "['Iteration', 'Energy'],\n"
	DataTemperature = "['Iteration', 'Temperature'],\n"

	for i in range(len(SA_Ops)):
		DataProbability += "['{Iteration}', '{Probability}'],\n".format(Iteration = i, Probability = SA_Ops.at[i, "Probability"])
		DataEnergy += "['{Iteration}', '{Energy}'],\n".format(Iteration = i, Probability = SA_Ops.at[i, "Energy"])
		DataTemperature += "['{Iteration}', '{Temperature}'],\n".format(Iteration = i, Probability = SA_Ops.at[i, "Temperature"])

	DataProbability = DataProbability[:-2]
	DataEnergy = DataEnergy[:-2]
	DataTemperature = DataTemperature[:-2]

	Line("SA_Ops_Probability", DataProbability, 'Evolution of the acceptation probability', Report, "['#BCC213']")
	Line("SA_Ops_Energy", DataEnergy, 'Evolution of the system energy', Report, "['#BCC213']")
	Line("SA_Ops_Temperature", DataTemperature, 'Evolution of the temperature', Report, "['#BCC213']")

	# All #
	DataProbability = "['Iteration', 'Probability'],\n"
	DataEnergy = "['Iteration', 'Energy'],\n"
	DataTemperature = "['Iteration', 'Temperature'],\n"

	for i in range(len(SA_All)):
		DataProbability += "['{Iteration}', '{Probability}'],\n".format(Iteration = i, Probability = SA_All.at[i, "Probability"])
		DataEnergy += "['{Iteration}', '{Energy}'],\n".format(Iteration = i, Probability = SA_All.at[i, "Energy"])
		DataTemperature += "['{Iteration}', '{Temperature}'],\n".format(Iteration = i, Probability = SA_All.at[i, "Temperature"])

	DataProbability = DataProbability[:-2]
	DataEnergy = DataEnergy[:-2]
	DataTemperature = DataTemperature[:-2]

	Line("SA_All_Probability", DataProbability, 'Evolution of the acceptation probability', Report, "['#BCC213']")
	Line("SA_All_Energy", DataEnergy, 'Evolution of the system energy', Report, "['#BCC213']")
	Line("SA_All_Temperature", DataTemperature, 'Evolution of the temperature', Report, "['#BCC213']")
	"""

	Report.write("}\n")

	Report.write("																		\n\
	function toggle(ID){																\n\
		var all = document.getElementsByClassName(ID);									\n\
		for (var i = 0; i < all.length; i++) {											\n\
			if (all[i].style.display == \"none\") {										\n\
				all[i].style.display = \"block\";										\n\
			} else {																	\n\
				all[i].style.display = \"none\";										\n\
			}        																	\n\
		}																				\n\
	}																					\n\
	")

	Report.write("</script>\n")

	Report.write("																			\n\
		<style>																				\n\
			.navbar {																		\n\
			  list-style-type: none;														\n\
			  margin: 0;																	\n\
			  padding: 0;																	\n\
			  width: 15%;																	\n\
			  background-color: #f1f1f1;													\n\
			  position: fixed;																\n\
			  left: 85%;																	\n\
			  height: 100%;																	\n\
			  overflow: auto;																\n\
			}																				\n\
																							\n\
			li a {																			\n\
			  display: block;																\n\
			  color: #000;																	\n\
			  text-decoration: none;														\n\
			  text-align: center;															\n\
			  border-bottom: 2px solid #555;												\n\
			  padding-top: 1px;																\n\
			}																				\n\
																							\n\
			li a.active {																	\n\
			  background-color: #4CAF50;													\n\
			  color: white;																	\n\
			}																				\n\
																							\n\
			li a.active {																	\n\
			  background-color: #555;														\n\
			  color: white;																	\n\
			}																				\n\
																							\n\
			li a:hover:not(.active) {														\n\
			  background-color: #555;														\n\
			  color: white;																	\n\
			}																				\n\
		</style>																			\n\
	")

	Report.write("</head>\n")

	#########################################
	#  				  BODY 				 	#
	#########################################
	Report.write("<body style=\"width: 85%;\">\n")

	Report.write("																					\n\
		<ul class=\"navbar\">																		\n\
		  	<li><a class=\"active\" href=\"#all_part\"><h3>Arguments and Operations</h3></a></li>	\n\
			<li><a href=\"#all_args_hist\"><h5>Arguments Precision Histogram</h5></a></li>			\n\
			<li><a href=\"#all_args_list\"><h5>Arguments Precision List</h5></a></li>				\n\
			<li><a href=\"#all_ops_hist\"><h5>Operations Precision Histogram</h5></a></li>			\n\
			<li><a href=\"#all_ops_list\"><h5>Operations Precision List</h5></a></li>				\n\
			<li><a href=\"#all_SA\"><h5>Research summary</h5></a></li>								\n\
		  	<li><a class=\"active\" href=\"#args_part\"><h3>Arguments</h3></a></li>					\n\
			<li><a href=\"#args_hist\"><h5>Arguments Precision Histogram</h5></a></li>				\n\
			<li><a href=\"#args_list\"><h5>Arguments Precision List</h5></a></li>					\n\
			<li><a href=\"#args_SA\"><h5>Research summary</h5></a></li>								\n\
		  	<li><a class=\"active\" href=\"#ops_part\"><h3>Operations</h3></a></li>					\n\
			<li><a href=\"#ops_hist\"><h5>Operations Precision Histogram</h5></a></li>				\n\
			<li><a href=\"#ops_list\"><h5>Operations Precision List</h5></a></li>					\n\
			<li><a href=\"#ops_SA\"><h5>Research summary</h5></a></li>								\n\
		</ul>																						\n\
		")

	Report.write("<h1 id=\"home\" style=\"text-align: center; \">Optimized Precision Report</h1>\n")

	############# All #############

	# Title
	Report.write("<h2 id=\"all_part\" style=\"text-align: center; \">Arguments precision and internal Operations precision</h2>\n")

	# Sub Title
	Report.write("<h3 id=\"all_args_hist\" style=\"text-align: center; \">Arguments minimum precision Histogram</h3>\n")

	# Histogram
	Report.write("<div id=\"AllArgsNcalls\" style=\"width: 95%; \"></div>\n")
	Report.write("<div id=\"AllArgsRange\" style=\"width: 95%; \"></div>\n")
	Report.write("<div id=\"AllArgsPrec\" style=\"width: 95%; \"></div>\n")

	# Sub Title
	Report.write("<h3 id=\"all_args_list\" style=\"text-align: center; \">Arguments minimum precison List</h3>\n")

	# List
	i = 0
	while i < len(DataAllArgs.index):
		ID = str(DataAllArgs.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)
		tmp = DataAllArgs[DataAllArgs['ID'] == DataAllArgs.at[i, 'ID']].reset_index(drop=True)

		Title = "Call to " + Fname + " in file " + Ffile + " at line " + str(Fline) + " (called " + str(DataAllArgs.at[i, 'Ncalls']) + " times):"
		Report.write("<h4 onclick=toggle('" + "AllArgsList_" + ID + "_" + str(i) + "')>" + Title + "</h4>")

		for j in tmp.index:
			Report.write("<div class=\"" + "AllArgsList_" + ID + "_" + str(i) + "\" id=\"" + "AllArgsList_" + ID + "_" + str(j) + "\" style=\"width: 85%; height: 100px\"></div>\n")

		i += j + 1

	# Sub Title
	Report.write("<h3 id=\"all_ops_hist\" style=\"text-align: center; \">Internal Operations precision Histogram</h3>\n")

	# Histogram
	Report.write("<div id=\"AllOpsNcalls\" style=\"width: 95%; \"></div>\n")
	Report.write("<div id=\"AllOpsRange\" style=\"width: 95%; \"></div>\n")
	Report.write("<div id=\"AllOpsPrec\" style=\"width: 95%; \"></div>\n")

	# Sub Title
	Report.write("<h3 id=\"all_ops_list\" style=\"text-align: center; \">Internal Operations precision List</h3>\n")

	# List
	i = 0
	while i < len(DataAllOps.index):
		ID = str(DataAllOps.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)

		Title = "Function " + Fname + " in file " + Ffile + " at line " + str(Fline) + " (called " + str(DataAllOps.at[i, 'Ncalls']) + " times):"
		Report.write("<h4 onclick=toggle('" + "AllOpsList_" + ID + "')>" + Title + "</h4>")

		Report.write("<div class = \"" + "AllOpsList_" + ID + "\" id=\""+ "AllOpsList_" + ID + "_Double" + "\" style=\"width: 85%; height: 100px\"></div>\n")
		Report.write("<div class = \"" + "AllOpsList_" + ID + "\" id=\""+ "AllOpsList_" + ID + "_Simple" + "\" style=\"width: 85%; height: 100px\"></div>\n")

		i += 1

	# Sub Title
	Report.write("<h3 id=\"all_SA\" style=\"text-align: center; \">Research Progression</h3>\n")

	# Research graph
	Report.write("<img src={} style=\"width:100%;\" alt=\"Progression of the Research for Arguments and Operations\">".format(
		SA_All_svg))

	############# Arguments #############

	# Title
	Report.write("<h2 id=\"args_part\" style=\"text-align: center; \">Arguments precision</h2>\n")

	# Sub Title
	Report.write("<h3 id=\"args_hist\" style=\"text-align: center; \">Arguments minimum precison Histogram</h3>\n")

	# Histogram
	Report.write("<div id=\"ArgsNcalls\" style=\"width: 95%; \"></div>\n")
	Report.write("<div id=\"ArgsRange\" style=\"width: 95%; \"></div>\n")
	Report.write("<div id=\"ArgsPrec\" style=\"width: 95%; \"></div>\n")

	# Sub Title
	Report.write("<h3 id=\"args_list\" style=\"text-align: center; \">Arguments minimum precison List</h3>\n")

	# List
	i = 0
	while i < len(DataArgs.index):
		ID = str(DataArgs.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)
		tmp = DataArgs[DataArgs['ID'] == DataArgs.at[i, 'ID']].reset_index(drop=True)

		Title = "Call to " + Fname + " in file " + Ffile + " at line " + str(Fline) + " (called " + str(DataArgs.at[i, 'Ncalls']) + " times):"
		Report.write("<h4 onclick=toggle('" + "ArgsList_" + ID + "_" + str(i) + "')>" + Title + "</h4>")

		for j in tmp.index:
			Report.write("<div class=\"" + "ArgsList_" + ID + "_" + str(i) + "\" id=\""+ "ArgsList_" + ID + "_" + str(j) + "\" style=\"width: 85%; height: 100px\"></div>\n")

		i += j + 1


	# Sub Title
	Report.write("<h3 id=\"args_SA\" style=\"text-align: center; \">Research Progression</h3>\n")

	# Research graph
	Report.write("<img src={} style=\"width:100%;\" alt=\"Progression of the Research for Arguments\">".format(
		SA_Args_svg))

	############# Operations #############

	# Title
	Report.write("<h2 id=\"ops_part\" style=\"text-align: center; \">Internal Operations precision</h2>\n")

	# Sub Title
	Report.write("<h3 id=\"ops_hist\" style=\"text-align: center; \">Internal Operations precision Histogram</h3>\n")

	# Histogram
	Report.write("<div id=\"OpsNcalls\" style=\"width: 95%; \"></div>\n")
	Report.write("<div id=\"OpsRange\" style=\"width: 95%; \"></div>\n")
	Report.write("<div id=\"OpsPrec\" style=\"width: 95%; \"></div>\n")

	# Sub Title
	Report.write("<h3 id=\"ops_list\" style=\"text-align: center; \">Internal Operations precision List</h3>\n")

	# List
	i = 0
	while i < len(DataOps.index):
		ID = str(DataOps.at[i, 'ID'])
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(ID)

		Title = "Function " + Fname + " in file " + Ffile + " at line " + str(Fline) + " (called " + str(DataOps.at[i, 'Ncalls']) + " times):"
		Report.write("<h4 onclick=toggle('" + "OpsList_" + ID + "')>" + Title + "</h4>")

		Report.write("<div class = \"" + "OpsList_" + ID + "\" id=\""+ "OpsList_" + ID + "_Double" + "\" style=\"width: 85%; height: 100px\"></div>\n")
		Report.write("<div class = \"" + "OpsList_" + ID + "\" id=\""+ "OpsList_" + ID + "_Simple" + "\" style=\"width: 85%; height: 100px\"></div>\n")

		i += 1

	# Sub Title
	Report.write("<h3 id=\"ops_SA\" style=\"text-align: center; \">Research Progression</h3>\n")

	# Research Graph
	Report.write("<img src={} style=\"width:100%;\" alt=\"Progression of the Research for Operations\">".format(
		SA_Ops_svg))

	Report.write("</body>\n")

	Report.write("</html>")
	Report.close()
