#!/usr/bin/env python3
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
from tabulate import tabulate
import random
import math
import sys
import struct
import shlex
import os.path
import subprocess
from os import listdir

def GetFunctionInfo(FunctionID):
	CallNb = int(FunctionID[FunctionID.rfind('_')+1:])
	FunctionID = FunctionID[:FunctionID.rfind('_')]
	Fline = int(FunctionID[FunctionID.rfind('_')+1:])
	FunctionID = FunctionID[:FunctionID.rfind('_')]
	Fname = FunctionID[FunctionID.rfind('/')+1:]
	FunctionID = FunctionID[:FunctionID.rfind('/')]
	Ffile = FunctionID[FunctionID.rfind('/')+1:]
	return CallNb, Fline, Fname, Ffile

def AddMainChart(CallChartString, DataMain):
	CallChartString += "\n\
			window.addEventListener('resize', DrawMainHist)\n\
		    google.charts.setOnLoadCallback(DrawMainHist);\n\
				\n\
		    function DrawMainHist() {\n\
		      var data = google.visualization.arrayToDataTable([\n\
          			['Functions', 'Number of calls'],\n\
          			" + DataMain + "]); \n\
				\n\
		      var view = new google.visualization.DataView(data);\n\
		      view.setColumns([0, 1,\n\
		      	{ 	calc: \"stringify\",\n\
					sourceColumn: 1,\n\
					type: \"string\",\n\
					role: \"annotation\"}\n\
				]);\n\
				\n\
		      var options = {\n\
		        title: \"Number of calls to instrumented functions\",\n\
		        hAxis: {\n\
		        	textStyle: {fontSize: 15},\n\
		        	slantedText:true,\n\
		        	slantedTextAngle:90,\n\
		        },\n\
		        legend: { position: \"none\" },\n\
		        bar: {groupWidth: 25},\n\
		        chartArea: {top: 30, left: \"25%\", width: \"60%\", height: \"100%\"},\n\
		        height: (data.getNumberOfRows() * 40) + 50,\n\
				annotations: {\n\
					textStyle: {\n\
						color: 'black',\n\
						fontSize: 15,\n\
						auraColor: 'transparent',\n\
					},\n\
					stem: { length: 0 }, \n\
					alwaysOutside: true,\n\
				},\n\
		      };\n\
				\n\
		    	var chart = new google.visualization.BarChart(document.getElementById(\"MainHist\"));\n\
		      \n\
		      	chart.draw(view, options);\n\
				\n\
  				google.visualization.events.addListener(chart, 'click', function(e) {\n\
				    var selection;\n\
				    if (e.targetID) {\n\
				      selection = e.targetID.split('#');\n\
				      if (selection[0].indexOf('vAxis') > -1) {\n\
				        DisplayFunctionInformations(data.getValue(parseInt(selection[selection.length - 1]), parseInt(selection[1])));\n\
				        location.hash = '#Calls'\n\
				      }\n\
				    }\n\
  				});\n\
		  }\n\
	"

	return CallChartString

def AddCallChart(CallChartString, ChartID, RangeData, ExponentData, MantissaData, OpsDoublePrec, OpsFloatPrec):
	CallChartString += "\n\
	 	window.addEventListener('resize', Draw" + ChartID + "Hist)\n\
		google.charts.setOnLoadCallback(Draw" + ChartID + "Hist);\n\
		function Draw" + ChartID + "Hist() {\n\
		  		var data = google.visualization.arrayToDataTable([\n\
		  			['IO','Minimum value', 'Maximum value'],\n\
		  			" + RangeData + "]);\n\
				\n\
		      	var view = new google.visualization.DataView(data);\n\
				\n\
		      	view.setColumns([0, \n\
		      		1,\n\
		      		{calc: \"stringify\",\n\
					sourceColumn: 1,\n\
					type: \"string\",\n\
					role: \"annotation\"},\n\
		      		2,\n\
		      		{calc: \"stringify\",\n\
					sourceColumn: 2,\n\
					type: \"string\",\n\
					role: \"annotation\"}\n\
				]);\n\
				\n\
		      	var options = {\n\
		        	title: \"Inputs/Ouptuts minimum and maximum values\",\n\
		        	annotations: {\n\
						textStyle: {\n\
							color: 'black',\n\
							fontSize: 15,\n\
							auraColor: 'transparent',\n\
						},\n\
						stem: { length: 0 }, \n\
						alwaysOutside: true,\n\
					},\n\
					chartArea: {width: \"50%\", left: \"25%\"},\n\
					height: 150,\n\
					hAxis: {\n\
						 textPosition: 'none',\n\
					},\n\
					colors: ['#d5dc1a','#BCC213'],\n\
		      	};\n\
				\n\
				var element = document.getElementById(\"" + ChartID + "RangeHist\");\n\
				if (element != null){\n\
			    	var chart = new google.visualization.ColumnChart(element);\n\
			      	chart.draw(view, options);}\n\
				\n\
		  		var data = google.visualization.arrayToDataTable([\n\
		  			['IO','Exponent size'],\n\
		  			" + ExponentData + "]);\n\
				\n\
		      	var view = new google.visualization.DataView(data);\n\
				\n\
		      	view.setColumns([0, \n\
		      		1,\n\
		      		{calc: \"stringify\",\n\
					sourceColumn: 1,\n\
					type: \"string\",\n\
					role: \"annotation\"}\n\
				]);\n\
				\n\
		      	var options = {\n\
		        	title: \"Inputs/Ouptuts minmum and maximum eponent size\",\n\
		        	annotations: {\n\
						textStyle: {\n\
							color: 'black',\n\
							fontSize: 15,\n\
							auraColor: 'transparent',\n\
						},\n\
						stem: { length: 0 }, \n\
						alwaysOutside: true,\n\
					},\n\
					chartArea: {width: \"50%\", left: \"25%\"},\n\
					height: 150,\n\
					vAxis: { \n\
						viewWindow: { min: 0 , max: 14 }, \n\
					},\n\
					hAxis: {\n\
						 textPosition: 'none',\n\
					},\n\
					colors: ['#0F5C9B'],\n\
		      	};\n\
				\n\
				var element = document.getElementById(\""+ ChartID + "ExponentHist\");\n\
				if (element != null){\n\
			    	var chart = new google.visualization.ColumnChart(element);\n\
			      	chart.draw(view, options);}\n\
				\n\
		  		var data = google.visualization.arrayToDataTable([\n\
		  			['IO','Mantissa size'],\n\
		  			" + MantissaData + "]);\n\
				\n\
		      	var view = new google.visualization.DataView(data);\n\
				\n\
		      	view.setColumns([0, \n\
		      		1,\n\
		      		{calc: \"stringify\",\n\
					sourceColumn: 1,\n\
					type: \"string\",\n\
					role: \"annotation\"}\n\
				]);\n\
				\n\
		      	var options = {\n\
		        	title: \"Inputs/Ouptuts minmum and maximum mantissa size\",\n\
		        	annotations: {\n\
						textStyle: {\n\
							color: 'black',\n\
							fontSize: 15,\n\
							auraColor: 'transparent',\n\
						},\n\
						stem: { length: 0 }, \n\
						alwaysOutside: true,\n\
					},\n\
					chartArea: {width: \"50%\", left: \"25%\"},\n\
					height: 300,\n\
					vAxis: { \n\
						viewWindow: { min: 0 , max: 54 }, \n\
					},\n\
					colors: ['#9B0500'],\n\
		      	};\n\
				\n\
				var element = document.getElementById(\""+ ChartID + "MantissaHist\");\n\
				if (element != null){\n\
			    	var chart = new google.visualization.ColumnChart(element);\n\
			      	chart.draw(view, options);}\n\
				\n\
		      	/* Internal Operations Double */\n\
				\n\
		  		var data = google.visualization.arrayToDataTable([\n\
		  			['Type','Mantissa size', '', 'ExponentSize'],\n\
		  			"+ OpsDoublePrec +"]);\n\
				\n\
		      	var view = new google.visualization.DataView(data);\n\
				\n\
		      	view.setColumns([0, \n\
		      		1,\n\
		      		{calc: \"stringify\",\n\
					sourceColumn: 1,\n\
					type: \"string\",\n\
					role: \"annotation\"},\n\
					2,\n\
					3,\n\
					{calc: \"stringify\",\n\
					sourceColumn: 3,\n\
					type: \"string\",\n\
					role: \"annotation\"},\n\
				]);\n\
				\n\
		      	var options = {\n\
		        	title: \"Precison for internal operations in double precision\",\n\
		        	annotations: {\n\
						textStyle: {\n\
							color: 'black',\n\
							fontSize: 15,\n\
							auraColor: 'transparent',\n\
						},\n\
						stem: { length: 2 , color: 'transparent'}, \n\
						alwaysOutside: true,\n\
					},\n\
					chartArea: {width: \"50%\", left: \"25%\"},\n\
					height: 150,\n\
					hAxis: { \n\
						viewWindow: { min: 0 , max: 66 }, \n\
					},\n\
					vAxis: {\n\
						 textPosition: 'none',\n\
					},\n\
					isStacked: true,\n\
					colors: ['#9B0500','transparent','#0F5C9B'],\n\
		      	};\n\
				\n\
				var element = document.getElementById(\""+ ChartID + "DoubleHist\");\n\
				if (element != null){\n\
			    	var chart = new google.visualization.BarChart(element);\n\
			      	chart.draw(view, options);}\n\
				\n\
		      	/* Internal Operations Float */\n\
				\n\
	  			var data = google.visualization.arrayToDataTable([\n\
		  			['Type','Mantissa size', '', 'ExponentSize'],\n\
		  			" + OpsFloatPrec + "]);\n\
				\n\
		      	var view = new google.visualization.DataView(data);\n\
				\n\
		      	view.setColumns([0, \n\
		      		1,\n\
		      		{calc: \"stringify\",\n\
					sourceColumn: 1,\n\
					type: \"string\",\n\
					role: \"annotation\"},\n\
					2,\n\
					3,\n\
					{calc: \"stringify\",\n\
					sourceColumn: 3,\n\
					type: \"string\",\n\
					role: \"annotation\"},\n\
				]);\n\
				\n\
		      	var options = {\n\
		        	title: \"Precison for internal operations in simple precision\",\n\
		        	annotations: {\n\
						textStyle: {\n\
							color: 'black',\n\
							fontSize: 15,\n\
							auraColor: 'transparent',\n\
						},\n\
						stem: { length: 2, color: 'transparent' }, \n\
						alwaysOutside: true,\n\
					},\n\
					chartArea: {width: \"50%\", left: \"25%\"},\n\
					height: 150,\n\
					hAxis: { \n\
						viewWindow: { min: 0 , max: 66 }, \n\
					},\n\
					vAxis: {\n\
						 textPosition: 'none',\n\
					},\n\
					isStacked: true,\n\
					colors: ['#9B0500','transparent','#0F5C9B'],\n\
		      	};\n\
				\n\
				var element = document.getElementById(\""+ ChartID + "FloatHist\");\n\
				if (element != null){\n\
			    	var chart = new google.visualization.BarChart(element);\n\
			      	chart.draw(view, options);}\n\
				\n\
		  }\n\
		  "
	return CallChartString

if __name__ == "__main__":

	ReportString = "\n\
<!DOCTYPE html>\n\
<html>\n\
	<!-- HEAD -->\n\
	<head>\n\
		<meta charset=\"utf-8\" />\n\
		<title>Precision Exploration Report</title>\n\
		\n\
		<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n\
		\n\
		<script>\n\
			google.charts.load(\"current\", {packages:['corechart']});\n\
		\n\
			/* Chart script */\n\
		\n\
			google.charts.setOnLoadCallback(HideAll);\n\
		\n\
			actualFunction = \"\";\n\
		\n\
			function DisplayFunctionInformations(ID){\n\
				if(actualFunction != \"\") {\n\
					var to_hide = document.getElementById(actualFunction);\n\
				 	to_hide.style.display = 'none';\n\
				}\n\
		\n\
				var to_display = document.getElementById(ID);\n\
				to_display.style.display = 'block';\n\
		\n\
				actualFunction = ID;\n\
			}\n\
		\n\
			function DisplayCallInformations(ChartID){\n\
				ArgumentsID = ChartID + \"Arguments\";\n\
				OperationsID = ChartID + \"Operations\";\n\
		\n\
				var to_display = document.getElementById(ArgumentsID);\n\
				if (to_display != null){\n\
					if(to_display.style.display != 'none') {\n\
						to_display.style.display = 'none';\n\
					}else{\n\
						to_display.style.display = 'block';\n\
					}\n\
				}\n\
		\n\
				var to_display = document.getElementById(OperationsID);\n\
		\n\
				if (to_display != null){\n\
					if(to_display.style.display != 'none') {\n\
						to_display.style.display = 'none';\n\
					}else{\n\
						to_display.style.display = 'block';\n\
					}\n\
				}\n\
			}\n\
		\n\
			function HideAll(){\n\
			    var to_hide = document.getElementsByClassName(\"OperationsPrecision\");\n\
			    \n\
			    for(var i = 0; i < to_hide.length; i++){\n\
			        to_hide[i].style.display = \"none\";\n\
			    }\n\
		\n\
			    var to_hide = document.getElementsByClassName(\"ArgumentsPrecision\");\n\
			    \n\
			    for(var i = 0; i < to_hide.length; i++){\n\
			        to_hide[i].style.display = \"none\";\n\
			    }\n\
		\n\
			    var to_hide = document.getElementsByClassName(\"FunctionInformations\");\n\
			    \n\
			    for(var i = 0; i < to_hide.length; i++){\n\
			        to_hide[i].style.display = \"none\";\n\
			    }\n\
			}\n\
		</script>\n\
		\n\
		<style>\n\
			body {\n\
				font-family: arial;\n\
				max-width: 1400px;\n\
				margin: auto;\n\
			}\n\
		\n\
			p {\n\
				text-align: justify;\n\
			}\n\
		\n\
			h1 {\n\
				text-align: center;\n\
			}\n\
		\n\
			.CallLink {\n\
				text-decoration: none;\n\
				color: black;\n\
			}\n\
		\n\
			.InfoLink {\n\
				text-decoration: none;\n\
				color: black;\n\
			}\n\
		\n\
		\n\
		</style>\n\
	</head>\n\
		\n\
	<!-- BODY -->\n\
	<body>\n\
		\n\
		<h1 id=\"Home\">Precision Exploration Report</h1>\n\
		\n\
		<h2 id=\"Introduction\"> Introduction</h2>\n\
		\n\
		<p>\n\
			The role of this report is to present results of the precision exploration script of verificarlo. The given result is not the optimal precision configuration and is obtained by a simple dichotomic search. The internal operations, precision is given exclusively for functions compiled with verificarlo, input(s) and output(s) precision is given for every called function.\n\
		</p>\n\
		\n\
		<h2 id=\"Functions\"> Functions</h2>\n\
		\n\
		<p>\n\
			This graph presents called functions which use float or double, they are sorted by number of calls and you can access to precision results for a function by clicking on the desired label.\n\
		</p>\n\
		\n\
		<div id=\"MainHist\"></div>\n\
		\n\
		<h2 id=\"Calls\"> Functions Call Site</h2>\n\
		\n\
		<p>\n\
			When a function is selected, a list with call sites of the selected function appear. You can hide or show precision information for a call site by clicking on the desired item in the list. If the function has not been compiled with verficarlo, internal operations precision are not accessible. If a function doesn't have double or float arguments, arguments precision will not be accessible too. \n\
		</p>\n\
		\n\
		<!-- Function Calls -->\n\
		\n\
	</body>\n\
</html>\n\
	"

	DaraDir = "vfc_exp_data/"
	Arguments = DaraDir + "ArgumentsResults.csv"
	Operations = DaraDir + "OperationsResults.csv"
	All_Args = DaraDir + "BothArgsResults.csv"
	All_Ops = DaraDir + "BothOpsResults.csv"
	SA_Args_svg = DaraDir + "vfc_args_only.svg"
	SA_Ops_svg = DaraDir + "vfc_ops_only.svg"
	SA_All_svg = DaraDir + "vfc_args_ops.svg"
	Report_File = DaraDir + "vfc_precexp_report.html"
	
	if not os.path.exists(Arguments):
		print("{} not found".format(Arguments))
		exit(0)
	else:
		DataArgs = pd.read_csv(Arguments)

	if not os.path.exists(Operations):
		print("{} not found".format(Operations))
		exit(0)
	else:
		DataAllOps = pd.read_csv(Operations)

	if not os.path.exists(All_Args):
		print("{} not found".format(All_Args))
		exit(0)
	else:
		DataAllArgs = pd.read_csv(All_Args)

	if not os.path.exists(All_Ops):
		print("{} not found".format(All_Ops))
		exit(0)
	else:
		DataAllOps = pd.read_csv(All_Ops)

	if not os.path.exists(SA_Args_svg):
		print("{} not found".format(SA_Args_svg))
		exit(0)

	if not os.path.exists(SA_Ops_svg):
		print("{} not found".format(SA_Ops_svg))
		exit(0)

	if not os.path.exists(SA_All_svg):
		print("{} not found".format(SA_All_svg))
		exit(0)

	CallChartString = ""

	################ Functions List ################

	dict = {}
	dict_index = {}

	for i in DataAllOps.index:
		CallNb, Fline, Fname, Ffile = GetFunctionInfo(DataAllOps.at[i, 'ID'])

		if Fname in dict.keys():
			dict[Fname] += DataAllOps.at[i, 'Ncalls']
			dict_index[Fname].append(i)
		else:
			dict[Fname] = DataAllOps.at[i, 'Ncalls']
			dict_index[Fname] = [i]

	SortedFunctions = pd.DataFrame(dict.items(), columns=['function','ncalls']).sort_values(by = 'ncalls', ascending=False, ignore_index=True)

	DataMain = ""

	for i in SortedFunctions.index:
		DataMain += "['{Function}',{Ncalls}],\n".format(
						Function = SortedFunctions.at[i, 'function'].upper(),
						Ncalls = SortedFunctions.at[i, 'ncalls'])

	CallChartString = AddMainChart(CallChartString, DataMain)

	################ Function Calls ################

	FunctionCallsStr = ""

	for i in SortedFunctions.index:
		FunctionCallsStr += "<div ID=\"{Function}\" class=\"FunctionInformations\">\n".format(
			Function = SortedFunctions.at[i, 'function'].upper())

		tmp_ops = DataAllOps.copy()
		tmp_ops = tmp_ops.drop([x for x in tmp_ops.index if x not in dict_index[SortedFunctions.at[i, 'function']]])
		tmp_ops = tmp_ops.sort_values(by = 'Ncalls', ascending=False, ignore_index=True)

		for j in tmp_ops.index:
			CallNb, Fline, Fname, Ffile = GetFunctionInfo(tmp_ops.at[j, 'ID'])

			if Fname == SortedFunctions.at[i, 'function']:
				ChartID = Ffile.replace('.', '_') + "_" + Fname.replace('.', '_') + "_" + str(CallNb)
				RangeData = ""
				ExponentData = ""
				MantissaData = ""
				OpsDoublePrec = ""
				OpsFloatPrec = ""

				FunctionCallsStr += "\t\t\t<a href=\"#" + ChartID + "Arguments\" onClick=\"DisplayCallInformations('"+ ChartID+ "'); Draw_" + ChartID + "_Hist()\" \
						class=\"InfoLink\"><h4>Call to {Fname} in {Ffile} at line {Fline} executed {Ncalls} time(s):</h4></a>\n".format(
					Fname = Fname.upper(),
					Ffile = Ffile,
					Fline = Fline,
					Ncalls = tmp_ops.at[j, 'Ncalls'])

				tmp_args = DataAllArgs.copy()
				tmp_args = tmp_args[tmp_args['ID'] == tmp_ops.at[j, 'ID']]
				for k in tmp_args.index:
					if tmp_args.at[k, 'Type'] == 0:
						RangeData += "['{IO}',{Min}, {Max}],\n".format(
							IO = tmp_args.at[k, 'IO'] + " - Float",
							Min = tmp_args.at[k, 'Min'],
							Max = tmp_args.at[k, 'Max'])
						ExponentData += "['{IO}',{Exponent}],\n".format(
							IO = tmp_args.at[k, 'IO'] + " - Float",
							Exponent = tmp_args.at[k, 'Range'])
						MantissaData += "['{IO}',{Mantissa}],\n".format(
							IO = tmp_args.at[k, 'IO'] + " - Float",
							Mantissa = tmp_args.at[k, 'Prec'])
					else :
						RangeData += "['{IO}',{Min}, {Max}],\n".format(
							IO = tmp_args.at[k, 'IO'] + " - Double",
							Min = tmp_args.at[k, 'Min'],
							Max = tmp_args.at[k, 'Max'])
						ExponentData += "['{IO}',{Exponent}],\n".format(
							IO = tmp_args.at[k, 'IO'] + " - Double",
							Exponent = tmp_args.at[k, 'Range'])
						MantissaData += "['{IO}',{Mantissa}],\n".format(
							IO = tmp_args.at[k, 'IO'] + " - Double",
							Mantissa = tmp_args.at[k, 'Prec'],)

				OpsFloatPrec += "['Float',{Prec32},{Fill},{Range32}],\n".format(
					Prec32 = tmp_ops.at[j, 'Prec32'],
					Fill = 23 - tmp_ops.at[j, 'Prec32'],
					Range32 = tmp_ops.at[j, 'Range32'])

				OpsDoublePrec += "['Double',{Prec64},{Fill},{Range64}],\n".format(
					Prec64 = tmp_ops.at[j, 'Prec64'],
					Fill = 52 - tmp_ops.at[j, 'Prec64'],
					Range64 = tmp_ops.at[j, 'Range64'])

				if (tmp_ops.at[j, 'Ninputs'] + tmp_ops.at[j, 'Noutputs']) != 0:
					FunctionCallsStr += "\n\
					<div id=\"" + ChartID + "Arguments\" class=\"ArgumentsPrecision\">\n\
						<h4 style=\"text-align: center;\">Arguments Precisions</h4>				\n\
						<div id=\"" + ChartID + "RangeHist\"></div>\n\
						<div id=\"" + ChartID + "ExponentHist\"></div>\n\
						<div id=\"" + ChartID + "MantissaHist\"></div>\n\
					</div>\n\
					"
				if not (tmp_ops.at[j, 'Int'] or tmp_ops.at[j, 'Lib']):
					FunctionCallsStr += "\n\
					<div id=\"" + ChartID + "Operations\"  class=\"OperationsPrecision\">\n\
					<h4 style=\"text-align: center;\">Internal Operations Precisions</h4>	\n\
					"
					if tmp_ops.at[j, 'Double']:
						FunctionCallsStr += "\n\
							<div id=\"" + ChartID + "DoubleHist\"></div>\n\
						"
					if tmp_ops.at[j, 'Float']:
						FunctionCallsStr += "\n\
							<div id=\"" + ChartID + "FloatHist\"></div>\n\
						"
					FunctionCallsStr += "\n\
					</div>																	\n\
						"

				CallChartString = AddCallChart(CallChartString, ChartID, RangeData, ExponentData, MantissaData, OpsDoublePrec, OpsFloatPrec)
		FunctionCallsStr += "</div>\n"

	FunctionCallsStr += "\n"
	
	ReportString = ReportString.replace('\t\t<!-- Function Calls -->', FunctionCallsStr)
	ReportString = ReportString.replace('\t\t\t/* Chart script */', CallChartString)

	ReportFile = open("report.html", "w")

	ReportString = ReportFile.write(ReportString)

	ReportFile.close()