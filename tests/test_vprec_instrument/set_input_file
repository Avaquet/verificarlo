#!/usr/bin/env python3
import xml.etree.ElementTree as etree
import sys
import os

if len(sys.argv) < 6:
	print("./set_input_file [input file name] [precision mantissa double]\
 [precision exponent double] [precision mantissa float] [precision exponent float] functions ...")
	exit(0)

# name of the input file
InputFileName = sys.argv[1]

# precision to use for the mantissa of double and corresponding field numbers
PrecDouble = [int(sys.argv[2]), 5, 3]
# precision to use for the exponent of double and corresponding field numbers
RangeDouble = [int(sys.argv[3]), 6, 4]
# precision to use for the mantissa of float and corresponding field numbers
PrecFloat = [int(sys.argv[4]), 7, 3]
# precision to use for the exponent of float and corresponding field numbers
RangeFloat = [int(sys.argv[5]), 8, 4]
# list of functions to modify
FunctionsList = sys.argv[6:]

# test if the input file exists
if not os.path.exists(InputFileName):
   	print("Input file not found")
   	exit(0)

tree = etree.parse(InputFileName)

for function in tree.iter("call"):      
    CurrentFunction = function[7].text
    ParentFunction = function[2].text
    IDFunction = "{}/{}".format(ParentFunction, CurrentFunction)

    if IDFunction in FunctionsList:
        nb_in = int(function[9].text)
        nb_out = int(function[10+nb_in].text)
        
        for i in range(10,10+nb_in):
            arg = function[i]
            if arg[2].text == '0' or arg[2].text == '2':
                arg[3].text = str(PrecFloat[0])
                arg[4].text = str(RangeFloat[0])
            elif arg[2].text == '1' or arg[2].text == '3':
                arg[3].text = str(PrecDouble[0])
                arg[4].text = str(RangeDouble[0])

        
        for i in range(11+nb_in, 11+nb_in+nb_out):
            arg = function[i]
            if arg[2].text == '0' or arg[2].text == '0':
                arg[3].text = str(PrecFloat[0])
                arg[4].text = str(RangeFloat[0])
            elif arg[2].text == '1' or arg[2].text == '3':
                arg[3].text = str(PrecDouble[0])
                arg[4].text = str(RangeDouble[0])

for i in range(len(FunctionsList)):
    FunctionsList[i] = FunctionsList[i].split(sep="/")[1]

for fops in tree.iter("fops"):      
    CurrentFunction = fops[2].text
    
    if CurrentFunction in FunctionsList:
        nb_in = int(fops[10].text)
        nb_out = int(fops[11+nb_in].text)
       
        for i in range(11,11+nb_in):
            arg = fops[i]
            if arg[2].text == '0' or arg[2].text == '2':
                arg[3].text = str(PrecFloat[0])
                arg[4].text = str(RangeFloat[0])
            elif arg[2].text == '1' or arg[2].text == '3':
                arg[3].text = str(PrecDouble[0])
                arg[4].text = str(RangeDouble[0])

        
        for i in range(12+nb_in, 12+nb_in+nb_out):
            arg = fops[i]
            if arg[2].text == '0' or arg[2].text == '0':
                arg[3].text = str(PrecFloat[0])
                arg[4].text = str(RangeFloat[0])
            elif arg[2].text == '1' or arg[2].text == '3':
                arg[3].text = str(PrecDouble[0])
                arg[4].text = str(RangeDouble[0])

tree.write(InputFileName)
